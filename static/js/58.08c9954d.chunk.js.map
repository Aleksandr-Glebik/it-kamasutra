{"version":3,"file":"static/js/58.08c9954d.chunk.js","mappings":"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","sources":["webpack://react-1/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-1/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://react-1/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"ProfileInfo_img__DOA-L\",\"img__profile\":\"ProfileInfo_img__profile__Bl1U1\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__P44UX\",\"mainPhoto\":\"ProfileInfo_mainPhoto__Vyz93\",\"contact\":\"ProfileInfo_contact__J7uCv\"};","import React, {useState, useEffect, ChangeEvent} from 'react'\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={activateEditMode}>{props.status || \"No statuse\"}</span>\r\n                </div>\r\n            }\r\n            { editMode &&\r\n                <div>\r\n                    <input autoFocus onChange={onStatusChange} onBlur={deActivateEditMode}\r\n                    value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../Common/FormsControls/FormsControls.tsx'\r\nimport { required } from '../../../utils/validators/validators.ts';\r\nimport styles from './ProfileInfo.module.css'\r\nimport s from '../../Common/FormsControls/FormsControls.module.css'\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n       <div>\r\n         <button>Save</button>\r\n       </div>\r\n\r\n       {error && <div className={s.formSummaryError}>\r\n                {error}\r\n       </div>}\r\n\r\n      <div>\r\n        <b>Full name:</b>\r\n        <Field placeholder={'Full name'} name={\"fullName\"} component={Input}\r\n                    validate={[required]}/>\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b>\r\n            <Field type={'checkbox'} name={\"lookingForAJob\"} component={Input} />\r\n      </div>\r\n      <div>\r\n        <b>My professional skills:</b>\r\n          <Field component={Textarea}\r\n            name='lookingForAJobDescription'\r\n            placeholder='Skills'\r\n            validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <b>About me:</b>\r\n        <Field component={Textarea}\r\n            name='aboutMe'\r\n            placeholder='About me'\r\n            validate={[required]} />\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n          return (\r\n            <div key={key} className={styles.contact}>\r\n              <b>{key}</b>:\r\n              <Field placeholder={`${key}`}\r\n                     name={`contacts.${key}`}\r\n                     component={Input}\r\n                     validate={[]}/>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'editProfile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState, useEffect, ChangeEvent} from 'react'\r\nimport Preloader from '../../Common/Preloader/Preloader.tsx'\r\nimport styles from './ProfileInfo.module.css'\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks.tsx'\r\nimport userPhoto from '../../../assets/img/user.jpg'\r\nimport ProfileDataForm from './ProfileDataForm.tsx'\r\nimport {ProfileType} from '../../../types/types.ts'\r\nimport { ContactsType } from '../../../types/types'\r\nimport { Image } from 'antd'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!profile) {\r\n      return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (event: ChangeEvent<HTMLInputElement>) => {\r\n      if (event.target.files?.length) {\r\n          savePhoto(event.target.files[0])\r\n      }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n      // todo: remove then\r\n      saveProfile(formData).then(\r\n        () => {\r\n          setEditMode(false)\r\n        }\r\n      )\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className={styles.descriptionBlock}>\r\n          <h2>{profile.aboutMe}</h2>\r\n          <Image src={profile.photos.large || userPhoto} className={styles.mainPhoto}></Image>\r\n          {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n          { editMode\r\n             ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n             : <ProfileData goToEditMode={() => {setEditMode(true)}} profile={profile} isOwner={isOwner} />}\r\n\r\n          <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n  return (\r\n    <div>\r\n      { isOwner &&\r\n       <div>\r\n         <button onClick={goToEditMode} >edit</button>\r\n       </div>}\r\n      <div>\r\n        <b>Full name:</b> {profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b> {profile.lookingForAJob ? 'yes' : 'no'}\r\n      </div>\r\n      {profile.lookingForAJob &&\r\n      <div>\r\n        <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n      </div>\r\n      }\r\n      <div>\r\n        <b>About me:</b> {profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n          return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n      </div>\r\n  </div>\r\n  )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n  return (\r\n      <div className={styles.contact}>\r\n       <b>{contactTitle}</b>: {contactValue}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__LD5wg\",\"post\":\"MyPosts_post__pmhNh\",\"posts\":\"MyPosts_posts__5cFOl\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__xSrZL\",\"img\":\"Post_img__CR6lg\"};","import React from 'react'\r\nimport styles from './Post.module.css'\r\n// console.log('styles', styles);\r\n\r\ntype PropsType = {\r\n  message: string\r\n  countLike: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n      <div className={styles.item}>\r\n        <img src=\"https://images.unsplash.com/photo-1475552113915-6fcb52652ba2?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1074&q=80\" className={styles.img} alt=\"photo\" />\r\n        {props.message}\r\n        <div>\r\n          <span>like {props.countLike}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport styles from './MyPosts.module.css'\r\nimport Post from './Post/Post.tsx';\r\n// import { addPostActionCreator, updateNewPostText } from '../../../redux/profile-reducer'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { required, maxLengthCreator  } from '../../../utils/validators/validators.ts';\r\nimport {Textarea} from '../../Common/FormsControls/FormsControls.tsx'\r\n\r\nconst maxLength15 = maxLengthCreator(15)\r\n\r\ntype AddNewPostFormValuesType = {\r\n  newPostText: string\r\n}\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<AddNewPostFormValuesType>\r\n}\r\nexport type DispatchPropsType = {\r\n  onAddPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  let postsElements = props.postsData.map( (post) => {\r\n    return <Post key={post.id} message={post.message} countLike={post.countLike}/>\r\n  })\r\n\r\n  // let newPostElement = React.createRef()\r\n\r\n  let onAddPost = (values: AddNewPostFormValuesType) => {\r\n    props.addPost(values.newPostText)\r\n  }\r\n\r\n  return (\r\n    <div className={styles.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <AddNewPostFormRedux onSubmit={onAddPost} />\r\n        <div className={styles.posts}>\r\n          { postsElements  }\r\n        </div>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormValuesType, PropsType> & PropsType> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n          <div>\r\n            <Field component={Textarea} name='newPostText' placeholder='Post message'\r\n              validate={[required, maxLength15]} />\r\n          </div>\r\n          <div>\r\n            <button>Add post</button>\r\n          </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm<AddNewPostFormValuesType, PropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nexport default MyPosts;","// import React from 'react'\r\nimport { actions } from '../../../redux/profile-reducer.ts'\r\nimport MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts.tsx';\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    postsData: state.profilePage.postsData,\r\n    // newPostText: state.profilePage.newPostText,\r\n  }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     addPost: (newPostText) => {\r\n//       dispatch( actions.addPostActionCreator(newPostText) )\r\n//     },\r\n//   }\r\n// }\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n  addPost: actions.addPostActionCreator\r\n})(MyPosts)\r\n\r\nexport default MyPostsContainer;","import React from 'react'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo.tsx';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer.tsx';\r\nimport {ProfileType} from '../../types/types.ts'\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n      <div>\r\n        <ProfileInfo savePhoto={props.savePhoto}\r\n                     isOwner={props.isOwner}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n                     saveProfile={props.saveProfile}/>\r\n        <MyPostsContainer />\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile.tsx';\r\nimport { connect } from 'react-redux';\r\nimport { getUserProfile, updateStatus, getStatus, savePhoto, saveProfile } from '../../redux/profile-reducer.ts'\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\"\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { ProfileType } from '../../types/types.ts'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void\r\n  getStatus: (userId: number) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (file: File) => void\r\n  saveProfile: (profile: ProfileType) => void\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n      let userId: number | null = +this.props.router.params.userId;\r\n      if (!userId) {\r\n        userId = this.props.authorizedUserId\r\n      }\r\n      if (!userId) {\r\n        console.error(`ID should exists in URI params or in state <authorizedUserId>`)\r\n      } else {\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n      }\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n      if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n        this.refreshProfile()\r\n      }\r\n    }\r\n\r\n    render () {\r\n      return (\r\n        <div>\r\n          <Profile {...this.props}\r\n            isOwner={!this.props.router.params.userId}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n            savePhoto={this.props.savePhoto}\r\n            saveProfile={this.props.saveProfile}\r\n            />\r\n        </div>\r\n      )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nfunction withRouter(Component) {\r\n  function ComponentWithRouterProp(props) {\r\n    let location = useLocation()\r\n    let navigate = useNavigate()\r\n    let params = useParams()\r\n\r\n    return (\r\n      <Component {...props} router={{location, navigate, params}} />\r\n    )\r\n  }\r\n\r\n  return ComponentWithRouterProp\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n\r\n","import React from \"react\"\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport {AppStateType} from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP> ) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to=\"/login\" />\r\n        }\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","event","currentTarget","value","onBlur","updateStatus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","s","Field","placeholder","name","component","Input","validate","required","type","Textarea","Object","keys","contacts","map","key","styles","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","initialValues","formData","then","alt","message","countLike","maxLength15","maxLengthCreator","AddNewPostFormRedux","postsElements","postsData","post","id","values","addPost","newPostText","connect","state","profilePage","actions","MyPosts","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","React","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","WrappedComponent","restProps","to"],"sourceRoot":""}