{"version":3,"file":"static/js/449.a4db6c61.chunk.js","mappings":"4KACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCkBjN,EATsC,SAACA,GACnC,IAAIC,EAAI,mBAAeD,EAAME,IAC7B,OACI,gBAAKC,UAAS,UAAKC,EAAL,YAAuBA,GAArC,UACI,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCDtC,EANmC,SAACN,GAChC,OACI,gBAAKG,UAAWC,EAAhB,SAAiCJ,EAAMO,W,uCCHzCC,GAAcC,EAAAA,EAAAA,GAAiB,IAuBrC,GAAeC,EAAAA,EAAAA,GAA8B,CACzCC,KAAM,2BADV,EAjB8F,SAACX,GAC3F,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAClBC,SAAU,CAACC,EAAAA,EAAUV,GACpBF,KAAK,iBAAiBa,YAAY,0BAEvC,0BACI,6CC0BhB,EA/BqC,SAACnB,GAElC,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAkBF,EAAMG,YAAYC,KAAK,SAACC,GAC1C,OAAO,SAAC,EAAD,CAAYnB,KAAMmB,EAAOnB,KAAsBJ,GAAIuB,EAAOvB,IAAtBuB,EAAOvB,OAGlDwB,EAAmBN,EAAMO,aAAaH,KAAK,SAACjB,GAC5C,OAAO,SAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQL,OAO3D,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACMkB,KAEN,iBAAKnB,UAAWC,EAAhB,WACI,yBACGsB,KAEH,SAAC,EAAD,CAAgBd,SAbR,SAACgB,GACjB5B,EAAM6B,YAAYD,EAAOE,0B,UCfjC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAACZ,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKE,CACrBQ,YAAaI,EAAAA,EAAAA,cAEjBC,EAAAA,EAJJ,CAKEC,I,iICdEC,EAA6B,SAAChB,GAAD,MAA0B,CACvDiB,OAAQjB,EAAMkB,KAAKD,SAOhB,SAASH,EAAuBK,GAanC,OAFqCP,EAAAA,EAAAA,IAA6CI,EAA4B,GAAzEJ,EATa,SAAChC,GAC/C,IAAKqC,EAAwBrC,EAAxBqC,OAAWG,GAAhB,OAA6BxC,EAA7B,GAEA,OAAKqC,GAGE,SAACE,GAAD,UAAsBC,KAFlB,SAAC,KAAD,CAAUnC,GAAG","sources":["webpack://react-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__u6df6\",\"dialogsItems\":\"Dialogs_dialogsItems__ggrVM\",\"dialog\":\"Dialogs_dialog__vM39A\",\"active\":\"Dialogs_active__ywtR6\",\"messages\":\"Dialogs_messages__+hx43\",\"message\":\"Dialogs_message__7p0FW\"};","import React from 'react'\r\nimport styles from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    id: number\r\n    path: string\r\n    name: string\r\n}\r\n\r\nlet DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = `/dialogs/${props.id}`\r\n    return (\r\n        <div className={`${styles.dialogs} ${styles.active}`}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react'\r\nimport styles from './../Dialogs.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nlet Message: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={styles.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\"\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../Common/FormsControls/FormsControls.tsx'\r\nimport { required, maxLengthCreator  } from '../../../utils/validators/validators.ts'\r\nimport {NewMessageFormType} from '../Dialogs'\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\n// type NewMessageFormValuesKeysType = Extract<keyof NewMessageFormType, string>\r\n\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormType, PropsType> &PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                validate={[required, maxLength50]}\r\n                 name='newMessageBody' placeholder='Enter your message'/>\r\n            </div>\r\n            <div>\r\n                <button>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormType>({\r\n    form: 'dialog-add-message-form'\r\n})(AddMessageForm)","import React from 'react'\r\nimport styles from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem.tsx'\r\nimport Message from './Message/Message.tsx'\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm.tsx'\r\nimport {InitialStateType} from '../../redux/dialogs-reducer.ts'\r\n\r\ntype  PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogsData.map( (dialog) => {\r\n        return <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n    })\r\n\r\n    let messagesElements = state.messagesData.map( (message) => {\r\n        return <Message message={message.message} key={message.id} />\r\n    })\r\n\r\n    let addNewMessage = (values: NewMessageFormType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dialogs}>\r\n            <div className={styles.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={styles.messages}>\r\n                <div>\r\n                 { messagesElements }\r\n                </div>\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n","import { connect } from 'react-redux'\r\nimport { actions } from '../../redux/dialogs-reducer.ts'\r\nimport Dialogs from './Dialogs.tsx'\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect.tsx'\r\nimport { compose } from 'redux'\r\nimport { AppStateType } from '../../redux/redux-store.ts'\r\nimport React from 'react'\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        sendMessage: actions.sendMessage\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n","import React from \"react\"\r\nimport { Navigate } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport {AppStateType} from '../redux/redux-store'\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: React.ComponentType<WCP> ) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) {\r\n            return <Navigate to=\"/login\" />\r\n        }\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n}"],"names":["props","path","id","className","styles","to","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","state","dialogsPage","dialogsElements","dialogsData","map","dialog","messagesElements","messagesData","values","sendMessage","newMessageBody","compose","connect","actions","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","restProps"],"sourceRoot":""}